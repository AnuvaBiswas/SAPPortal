@page "/UserGroupRestriction"
@inject NavigationManager NavigationManager
@using SAPPortal.Models;
@using SAPPortal.Components.Services;
@using System.Net;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.EntityFrameworkCore;
@inject HttpClient Http;
@inject IJSRuntime JsRuntime;
@inject ApplicationDbContext _dbContext;
@inject ApplicationDbContext _dbContext1;
@rendermode InteractiveServer

<EditForm Model="@m_GROUPRIGHTMST1" OnValidSubmit="Submit" FormName="myForm11">
    <div class="form-group mb-3">
        <label for="userRole">User Group</label>

        <select id="userGroupId" class="form-control" @bind="m_GROUPRIGHTMST1.GroupId">
            <option value="">-- Select a User Group --</option>
            @foreach (var uSERGROUP in lstUserGroups)
            {
                <option @onchange="fillUserGroup2" value="@uSERGROUP.GroupId">@uSERGROUP.GroupName</option>
            }
        </select>
    </div>
    <div class="form-group mb-3">
        <label for="menu">Module</label>
        <select id="userId" class="form-control" @bind="m_GROUPRIGHTMST1.ModId" @bind:event="onchange">
            <option value="">-- Select a Module --</option>
            @foreach (var m_MODULE in lstM_Modules)
            {
                <option value="@m_MODULE.ModId">@m_MODULE.ModName</option>
            }
        </select>
    </div>
 
    
  
</EditForm>

<div class="row">
    <div class="col-12 p-0">
        @if (lstMenus != null && lstMenus.Count > 0)
        {
            <div style="overflow-y: auto; height: 400px; border: 1px solid black;">
                <table class="table" style="width: 100%; margin-bottom: 0; border-collapse: separate; border-spacing: 0;">
                    <thead class="thead-dark">
                        <tr>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">Description</th>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">Module Name</th>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">VIEW</th>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">EDIT</th>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">ADD</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var master in lstMenus)
                        {
                            <tr>
                                <td>@master.Description</td>
                                <td>@master.ModName</td>
                                <td><input type="checkbox" @bind="master.IsViewChecked" /></td>
                                <td><input type="checkbox" @bind="master.IsEditChecked" /></td>
                                <td><input type="checkbox" @bind="master.IsAddChecked" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p>No data available.</p>
        }
    </div>
</div>
   <div class="col-md-4 mt-3">
        <div class="mt-3">
            <button type="button"
                    @onclick="Submit">
                Submit
            </button>
        </div>
    <div class="mt-3">
        <button type="button"
                @onclick="Show">
            Show
        </button>
    </div>
        </div>
<div class="row">
    <div class="col-12 p-0">
        @if (lstUseGrpStructure != null && lstUseGrpStructure.Count > 0)
        {
            <div style="overflow-y: auto; height: 400px; border: 1px solid black;">
                <table class="table" style="width: 100%; margin-bottom: 0; border-collapse: separate; border-spacing: 0;">
                    <thead class="thead-dark">
                        <tr>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">Description</th>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">Module Name</th>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">VIEW</th>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">EDIT</th>
                            <th style="position: sticky; top: 0; background-color: #343a40; z-index: 1;">ADD</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var master in lstUseGrpStructure)
                        {
                            <tr>
                                <td>@master.Descr</td>
                                <td>@master.ModName</td>
                                <td><input type="checkbox" @bind="master.IsViewChecked" /></td>
                                <td><input type="checkbox" @bind="master.IsEditChecked" /></td>
                                <td><input type="checkbox" @bind="master.IsAddChecked" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p>No data available.</p>
        }
    </div>
</div>




@code {

    private M_USERGROUP userGroup = new M_USERGROUP();
    public static string usergrpname1 = string.Empty;
    private int userId = 0;
    public int intGroupId = 0;

    public List<MenuStruct> lstMenus = new List<MenuStruct>();
    List<M_USERGROUP> lstUserGroups = new List<M_USERGROUP>();
    List<M_MENU> lstM_Menus = new List<M_MENU>();
    List<M_MODULE> lstM_Modules = new List<M_MODULE>();
    List<M_USERRIGHTTYPE> lstM_USERRIGHTTYPEs = new List<M_USERRIGHTTYPE>();

    List<M_USERGROUP> lstUserGrps = new List<M_USERGROUP>();
    M_GROUPRIGHTMST m_GROUPRIGHTMST1 = new M_GROUPRIGHTMST();
    M_GROUPRIGHTDTL m_GROUPRIGHTDTL = new M_GROUPRIGHTDTL();

    public List<UseGrpStructure> lstUseGrpStructure = new List<UseGrpStructure>();
    string searchTerm = string.Empty;
    string searchTerm1 = string.Empty;

    int intGRTMstCode = 0;

    private void fillUserGroup2(ChangeEventArgs e)
    {
        if (userGroup.GroupId > 0)
        {
            searchTerm = e.Value.ToString();
            var result = _dbContext.AS_M_USERGROUP
                .Where(u => u.GroupId.ToString() == searchTerm)
                .ToList();
            if (result.Any())
            {
                userGroup.GroupName = result.First().GroupName;
            }

        }
    }

    public async Task Show()
    {
        fillModule();
    }

    private async Task Submit()
    {
        M_GROUPRIGHTMST m_GROUPRIGHTMST = new M_GROUPRIGHTMST();

        if (m_GROUPRIGHTMST1.GroupId == 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please select a user group.");
            return;
        }

        if (m_GROUPRIGHTMST1.ModId == 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please select a Module.");
            return;
        }
        var existingPermissions = await _dbContext.AS_M_GROUPRIGHTMST
            .Where(m => m.GroupId == userGroup.GroupId)
            .ToListAsync();
        _dbContext.AS_M_GROUPRIGHTMST.RemoveRange(existingPermissions);


        m_GROUPRIGHTMST = new M_GROUPRIGHTMST
            {
                ModId = m_GROUPRIGHTMST1.ModId,
                GroupId = m_GROUPRIGHTMST1.GroupId,
                EntryDT = DateTime.Now,
                LMDT = Convert.ToDateTime(CommonSessionClass.LogInTime),
                LMBY = CommonSessionClass.UId
            };

        _dbContext.AS_M_GROUPRIGHTMST.Add(m_GROUPRIGHTMST);
        await _dbContext.SaveChangesAsync();

        intGRTMstCode = m_GROUPRIGHTMST.GRTMstCode;


        var existingPermissions1 = await _dbContext.AS_M_GROUPRIGHTDTL
            .Where(m => m.GRTMstCode == intGRTMstCode)
            .ToListAsync();
        _dbContext.AS_M_GROUPRIGHTDTL.RemoveRange(existingPermissions1);

        foreach (var menu in lstMenus)
        {
            if (menu.IsViewChecked)
            {
                var exists = _dbContext.AS_M_GROUPRIGHTDTL
                    .AsNoTracking()
                    .Any(e => e.GRTMstCode == intGRTMstCode && e.MenuId == menu.MenuId && e.URTCode == Convert.ToInt32(menu.VIEWURTCode));

                if (!exists)
                {
                    var viewPermission = new M_GROUPRIGHTDTL
                        {
                            GRTMstCode = intGRTMstCode,
                            MenuId = menu.MenuId,
                            URTCode = Convert.ToInt32(menu.VIEWURTCode)
                        };
                    _dbContext.AS_M_GROUPRIGHTDTL.Add(viewPermission);
                }
            }
            if (menu.IsEditChecked)
            {
                var exists = _dbContext.AS_M_GROUPRIGHTDTL
                    .AsNoTracking()
                    .Any(e => e.GRTMstCode == intGRTMstCode && e.MenuId == menu.MenuId && e.URTCode == Convert.ToInt32(menu.EDITURTCode));

                if (!exists)
                {
                    var editPermission = new M_GROUPRIGHTDTL
                        {
                            GRTMstCode = intGRTMstCode,
                            MenuId = menu.MenuId,
                            URTCode = Convert.ToInt32(menu.EDITURTCode)
                        };
                    _dbContext.AS_M_GROUPRIGHTDTL.Add(editPermission);
                }
            }
            if (menu.IsAddChecked)
            {
                var exists = _dbContext.AS_M_GROUPRIGHTDTL
                    .AsNoTracking()
                    .Any(e => e.GRTMstCode == intGRTMstCode && e.MenuId == menu.MenuId && e.URTCode == Convert.ToInt32(menu.ADDURTCode));

                if (!exists)
                {
                    var addPermission = new M_GROUPRIGHTDTL
                        {
                            GRTMstCode = intGRTMstCode,
                            MenuId = menu.MenuId,
                            URTCode = Convert.ToInt32(menu.ADDURTCode)
                        };
                    _dbContext.AS_M_GROUPRIGHTDTL.Add(addPermission);
                }
            }
        }

        // Save all added entities at once
        await _dbContext.SaveChangesAsync();

        await JsRuntime.InvokeVoidAsync("alert", "Permissions updated successfully");
        ResetForm();
    }

    protected override async Task OnInitializedAsync()
    {
        if ((CommonSessionClass.UName) == String.Empty || CommonSessionClass.UName == null)
        {
            NavigationManager.NavigateTo("/loginPage", true);
        }
        else
        {
            await GetFormAsync();

            lstUserGroups = await _dbContext.AS_M_USERGROUP
           .AsNoTracking()
           .Select(c => new M_USERGROUP { GroupId = c.GroupId, GroupName = c.GroupName, ParentGroup = c.ParentGroup })
           .ToListAsync();

            lstM_Menus = await _dbContext.AS_M_MENU
         .AsNoTracking()
         .Select(c => new M_MENU { MenuId = c.MenuId, Description = c.Description })
         .ToListAsync();

            lstM_Modules = await _dbContext.AS_M_MODULE
         .AsNoTracking()
         .Select(c => new M_MODULE { ModId = c.ModId, ModName = c.ModName })
         .ToListAsync();

        
            //fillModule();

        }
    }

    private void fillModule()
    {

        var query = from gm in _dbContext.AS_M_GROUPRIGHTMST
                    join gd in _dbContext.AS_M_GROUPRIGHTDTL on gm.GRTMstCode equals gd.GRTMstCode
                    join ut in _dbContext.AS_M_USERRIGHTTYPE on gd.URTCode equals ut.URTCode
                    join um in _dbContext.AS_M_MODULE on gm.ModId equals um.ModId
                    join m in _dbContext.AS_M_MENU on gd.MenuId equals m.MenuId
                    where gm.ModId == m_GROUPRIGHTMST1.ModId && gm.GroupId == m_GROUPRIGHTMST1.GroupId
                    // where gm.ModId == 2 && gm.GroupId == 1
                    select new UseGrpStructure
                        {
                            GRTMstCode =Convert.ToInt32(gm.GRTMstCode),
                            ModId = Convert.ToInt32(gm.ModId),
                            GroupId = Convert.ToInt32(gm.GroupId),
                            EntryDT = gm.EntryDT,
                            LMDT = gm.LMDT,
                            LMBY = Convert.ToInt32(gm.LMBY),
                            MenuId = Convert.ToInt32(gd.MenuId),
                            URTCode = Convert.ToInt32(gd.URTCode),
                            Descr = m.Description,
                            ModName = um.ModName
                        };

        lstUseGrpStructure = query.ToList();

        List<UseGrpStructure> l = lstUseGrpStructure;

        // foreach (var useGrpStructure in lstUseGrpStructure)
        // {
        //     useGrpStructure.IsViewChecked = true;
        //     useGrpStructure.IsEditChecked = true; ;
        //     useGrpStructure.IsAddChecked = true;
        // }
    }


    public async Task<List<MenuStruct>> GetFormAsync()
    {
        var result = from m1 in _dbContext.AS_M_MENU
                     join module in _dbContext.AS_M_MODULE
                     on m1.ModuleID equals module.ModId
                     where m1.DisplayMode == 1
                     select new MenuStruct
                         {
                             MenuId = m1.MenuId,
                             Description = m1.Description,
                             ModName = module.ModName,
                             ModId = module.ModId,

                             VIEW = _dbContext.AS_M_USERRIGHTTYPE
                                           .Where(urt => urt.Active.ToString() == "Y")
                                           .OrderBy(urt => urt.URTCode)
                                           .Select(urt => urt.Descr)
                                           .FirstOrDefault(),

                             VIEWURTCode = _dbContext.AS_M_USERRIGHTTYPE
                                                        .Where(urt => urt.Active.ToString() == "Y")
                                                    .OrderBy(urt => urt.URTCode)
                                                    .Select(urt => urt.URTCode.ToString())
                                                    .FirstOrDefault(),

                             EDIT = _dbContext.AS_M_USERRIGHTTYPE
                                               .Where(urt => urt.Active.ToString() == "Y")
                                           .OrderByDescending(urt => urt.URTCode)
                                           .Select(urt => urt.Descr)
                                           .FirstOrDefault(),

                             EDITURTCode = _dbContext.AS_M_USERRIGHTTYPE
                                                      .Where(urt => urt.Active.ToString() == "Y")
                                                      .OrderByDescending(urt => urt.URTCode)
                                                      .Select(urt => urt.URTCode.ToString())
                                                      .FirstOrDefault(),

                             ADD = _dbContext.AS_M_USERRIGHTTYPE
                                           .Where(urt => urt.URTCode == 2)
                                           .Select(urt => urt.Descr)
                                           .FirstOrDefault(),

                             ADDURTCode = _dbContext.AS_M_USERRIGHTTYPE
                                                     .Where(urt => urt.URTCode == 2)
                                                     .Select(urt => urt.URTCode.ToString())
                                                     .FirstOrDefault()
                         };

        lstMenus = await result.ToListAsync();  // Correctly awaiting the async operation

        return lstMenus;
    }
    private void ResetForm()
    {

        lstUserGrps.Clear();
        lstMenus.Clear();


    }
}
